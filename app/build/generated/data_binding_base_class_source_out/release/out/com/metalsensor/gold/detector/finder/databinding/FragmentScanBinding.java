// Generated by view binder compiler. Do not edit!
package com.metalsensor.gold.detector.finder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.camera.view.PreviewView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.metalsensor.gold.detector.finder.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentScanBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView choseimage;

  @NonNull
  public final ImageView chup;

  @NonNull
  public final ImageView imvcmroff;

  @NonNull
  public final ImageView imvcmron;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final RelativeLayout relativeLayout2;

  @NonNull
  public final ImageView selectedImageView;

  @NonNull
  public final PreviewView viewFinder;

  private FragmentScanBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView choseimage,
      @NonNull ImageView chup, @NonNull ImageView imvcmroff, @NonNull ImageView imvcmron,
      @NonNull ConstraintLayout main, @NonNull RelativeLayout relativeLayout2,
      @NonNull ImageView selectedImageView, @NonNull PreviewView viewFinder) {
    this.rootView = rootView;
    this.choseimage = choseimage;
    this.chup = chup;
    this.imvcmroff = imvcmroff;
    this.imvcmron = imvcmron;
    this.main = main;
    this.relativeLayout2 = relativeLayout2;
    this.selectedImageView = selectedImageView;
    this.viewFinder = viewFinder;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentScanBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentScanBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_scan, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentScanBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.choseimage;
      ImageView choseimage = ViewBindings.findChildViewById(rootView, id);
      if (choseimage == null) {
        break missingId;
      }

      id = R.id.chup;
      ImageView chup = ViewBindings.findChildViewById(rootView, id);
      if (chup == null) {
        break missingId;
      }

      id = R.id.imvcmroff;
      ImageView imvcmroff = ViewBindings.findChildViewById(rootView, id);
      if (imvcmroff == null) {
        break missingId;
      }

      id = R.id.imvcmron;
      ImageView imvcmron = ViewBindings.findChildViewById(rootView, id);
      if (imvcmron == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.relativeLayout2;
      RelativeLayout relativeLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout2 == null) {
        break missingId;
      }

      id = R.id.selectedImageView;
      ImageView selectedImageView = ViewBindings.findChildViewById(rootView, id);
      if (selectedImageView == null) {
        break missingId;
      }

      id = R.id.viewFinder;
      PreviewView viewFinder = ViewBindings.findChildViewById(rootView, id);
      if (viewFinder == null) {
        break missingId;
      }

      return new FragmentScanBinding((ConstraintLayout) rootView, choseimage, chup, imvcmroff,
          imvcmron, main, relativeLayout2, selectedImageView, viewFinder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
