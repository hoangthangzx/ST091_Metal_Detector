// Generated by view binder compiler. Do not edit!
package com.metalsensor.gold.detector.finder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.metalsensor.gold.detector.finder.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityResultBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imvBack;

  @NonNull
  public final ImageView imvTick;

  @NonNull
  public final ImageView imvcoin;

  @NonNull
  public final ImageView imvcoin2;

  @NonNull
  public final LinearLayout ln;

  @NonNull
  public final LinearLayout lnAbout;

  @NonNull
  public final LinearLayout lnStatus2;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final LinearLayout noitem;

  @NonNull
  public final ConstraintLayout relativeLayout3;

  @NonNull
  public final TextView tvTitle;

  @NonNull
  public final TextView tvdiametter;

  @NonNull
  public final TextView tvinfo;

  @NonNull
  public final TextView tvname;

  @NonNull
  public final TextView tvwei;

  @NonNull
  public final TextView tvyear;

  private ActivityResultBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView imvBack,
      @NonNull ImageView imvTick, @NonNull ImageView imvcoin, @NonNull ImageView imvcoin2,
      @NonNull LinearLayout ln, @NonNull LinearLayout lnAbout, @NonNull LinearLayout lnStatus2,
      @NonNull ConstraintLayout main, @NonNull LinearLayout noitem,
      @NonNull ConstraintLayout relativeLayout3, @NonNull TextView tvTitle,
      @NonNull TextView tvdiametter, @NonNull TextView tvinfo, @NonNull TextView tvname,
      @NonNull TextView tvwei, @NonNull TextView tvyear) {
    this.rootView = rootView;
    this.imvBack = imvBack;
    this.imvTick = imvTick;
    this.imvcoin = imvcoin;
    this.imvcoin2 = imvcoin2;
    this.ln = ln;
    this.lnAbout = lnAbout;
    this.lnStatus2 = lnStatus2;
    this.main = main;
    this.noitem = noitem;
    this.relativeLayout3 = relativeLayout3;
    this.tvTitle = tvTitle;
    this.tvdiametter = tvdiametter;
    this.tvinfo = tvinfo;
    this.tvname = tvname;
    this.tvwei = tvwei;
    this.tvyear = tvyear;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityResultBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityResultBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_result, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityResultBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imvBack;
      ImageView imvBack = ViewBindings.findChildViewById(rootView, id);
      if (imvBack == null) {
        break missingId;
      }

      id = R.id.imvTick;
      ImageView imvTick = ViewBindings.findChildViewById(rootView, id);
      if (imvTick == null) {
        break missingId;
      }

      id = R.id.imvcoin;
      ImageView imvcoin = ViewBindings.findChildViewById(rootView, id);
      if (imvcoin == null) {
        break missingId;
      }

      id = R.id.imvcoin2;
      ImageView imvcoin2 = ViewBindings.findChildViewById(rootView, id);
      if (imvcoin2 == null) {
        break missingId;
      }

      id = R.id.ln;
      LinearLayout ln = ViewBindings.findChildViewById(rootView, id);
      if (ln == null) {
        break missingId;
      }

      id = R.id.lnAbout;
      LinearLayout lnAbout = ViewBindings.findChildViewById(rootView, id);
      if (lnAbout == null) {
        break missingId;
      }

      id = R.id.lnStatus_2;
      LinearLayout lnStatus2 = ViewBindings.findChildViewById(rootView, id);
      if (lnStatus2 == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.noitem;
      LinearLayout noitem = ViewBindings.findChildViewById(rootView, id);
      if (noitem == null) {
        break missingId;
      }

      id = R.id.relativeLayout3;
      ConstraintLayout relativeLayout3 = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout3 == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      id = R.id.tvdiametter;
      TextView tvdiametter = ViewBindings.findChildViewById(rootView, id);
      if (tvdiametter == null) {
        break missingId;
      }

      id = R.id.tvinfo;
      TextView tvinfo = ViewBindings.findChildViewById(rootView, id);
      if (tvinfo == null) {
        break missingId;
      }

      id = R.id.tvname;
      TextView tvname = ViewBindings.findChildViewById(rootView, id);
      if (tvname == null) {
        break missingId;
      }

      id = R.id.tvwei;
      TextView tvwei = ViewBindings.findChildViewById(rootView, id);
      if (tvwei == null) {
        break missingId;
      }

      id = R.id.tvyear;
      TextView tvyear = ViewBindings.findChildViewById(rootView, id);
      if (tvyear == null) {
        break missingId;
      }

      return new ActivityResultBinding((ConstraintLayout) rootView, imvBack, imvTick, imvcoin,
          imvcoin2, ln, lnAbout, lnStatus2, main, noitem, relativeLayout3, tvTitle, tvdiametter,
          tvinfo, tvname, tvwei, tvyear);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
